.TH MAXWELL 8 2016-07-30 Linux 

.SH NAME
Maxwell \- Daemon for gathering entropy from a timer and feeding it to
.BR random (4).

.SH SYNOPSIS.
.ll +8
.B maxwell
.RB [\-s ]
.B maxwell
[\-p 
.I number
]
[\-f 
.I number
]

.SH DESCRIPTION

.I maxwell
collects randomness from the small variations in a system
timer, distills it into a concentrated form, and sends it to
.BR random (4).
The amount of output is a few K bits per second,
and the quality
is intended to be very high. Both volume and quality should be
adequate for most applications.

Non-root users can run the program only with the -s (stdout)
option, which sends test data to standard output.

There are a number of other ways to feed entropy to
.BR random (4).
The advantage of
.I maxwell
is that it is small, simple and only minimally
hardware-dependent.
The other methods also have advantages, and in
many cases one of them will be preferable to
this one. For discussion, see the design
paper listed in the references.

This man page is for maxwell version 2 (2016); the options have changed considerably from version 1 (2012).

.SH OPTIONS

Two options take no parameters; these are intended mainly for use in testing:

.TP 
.BI \-s
Send output to standard output instead of to /dev/random.

Other options let
you control the amount and type of output, and it can be
piped into test tools or sent to a file for later analysis.

A
.I non-root user cannot run the program without this option.
It will just output an error message and quit. With the option,
it can be run for testing. It can also be redirected into
/dev/random, though no entropy credit will be given.

.TP
.BI -<digit>
This runs the given number of loops, where without this option
at least three are always used. It also omits the extra mixing normally done outside
the loop. It is normally used with the -s option.

If
.I maxwell -1 -s | ent
shows >= three bits of entropy per byte, then
.I maxwell
is safe. That is 12 bits per loop and
.I maxwell
uses at least three loops per output.

.PP
Several options with numeric arguments allow changing the parameters
with which the program runs. The options may be omitted, in which case
default values are used.

The numeric arguments are required, and must be in the range 0-99.

.TP 
.BI \-p \ n
Paranoia, affects how much looping is done before
each output. The number of loops done is 2p + 3.
Each loop collects sixteen timer samples for entropy. 

Default is p = 0 which gives three loops.

.TP 
.BI \-f \ n
At startup, the program produces some output using
parameters chosen to quickly fill up the random(4)
pool. After that, it changes to more conservative
parameters for longer-term use. This parameter controls how much of the first fast
data is generated, in kilobits.

Default is 4, enough to completely fill the pool
if random(4) is compiled with its default parameters.

.TP 
.BI \-h \ n
Halt after n kilobits of output.

Default is for the program to continue indefinitely,
but limiting the output is useful for testing.

.PP
The above options may be combined at will.

.SH BUGS

The exact entropy generated by a timer call cannot be known, so it
is impossible to know exactly how much entropy the program feeds to
.BR random (4).

The program uses a loop to collect entropy. Each pass makes 16 timer
calls and gets 16 samples modulo 31. With the default settings, there
are three passes for each 32-bit chunk of output. This is safe if 16
timer calls give 11 or more bits of entropy.

There is considerable evidence that available entropy is much more
than this minium requirement. See the design paper.

.SH TESTING

In addition to the -s option described above, there is a test
program called test.sam.c in the source directory. It is designed
to have its output piped into ent(1), an entropy testing program.

This tests at a lower level than maxwell -s; it samples data in
the same way maxwell does, but does no mixing at all, just packs
each sample into a byte and sends it out.

See the design paper and comments in the test program
source for details.

On any unusual system, these tests should be run
before
.BR maxwell ()
is deployed.

.SH SEE ALSO

.BR random (4)
.BR ent (1)

.SH References

RFC 4086
.I Randomness Requirements for Security
is the standard reference on randomness issues.
http://www.ietf.org/rfc/rfc4086.txt

.I Analysis of inherent randomness of the Linux kernel
by Nicholas McGuire, Peter Okech & Georg Schiesser
discusses timer entropy and gives measurements.
http://lwn.net/images/conf/rtlws11/papers/paper.37.html

.I The maxwell(8) random number generator
by Sandy Harris documents the design rationale for
this program.

That paper is included in ODF and PDF formats in the
source directory for the daemon. License is CC-by-SA;
the program and this man page are under GPL. If you
need either under some other open source license,
email me: sandyinchina@gmail.com.